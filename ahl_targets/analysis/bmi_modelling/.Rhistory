result_df_1 <- do.call("rbind", results_all_1)
# chunk 2
results_all_2 <- list()
# Set the seed outside the loop to ensure reproducibility
set.seed(46)
# Number of evaluations
num_evaluations <- 10
for (i in 1:num_evaluations) {
# Generate random values for intake_change_low and intake_change_high
intake_change_pop <- runif(1, -51.99,-49.12)
scaled_intake <- intake_change_pop/0.6424
over_intake <- 0.95 * scaled_intake
obese_intake <- 1.04 * scaled_intake
mobese_intake <- 1.22 * scaled_intake
# Call the overweight_func function
result <- bootstrap_func(over_intake,obese_intake,mobese_intake)
result <- result %>% mutate(pop_intake = intake_change_pop)
# Append the result to the list
results_all_2[[i]] <- result
}
result_df_2 <- do.call("rbind", results_all_2)
result_df <- rbind(result_df_1, result_df_2)
over_df <- result_df %>% filter(final_bmi_class == "overweight")
View(over_df)
-51.29155 -51.32093
-51.29155/0.6424
-51.29155/0.6424 * 0.95
-51.32093/0.6424 * 0.95
results_all_2 <- list()
# Set the seed outside the loop to ensure reproducibility
set.seed(46)
# Number of evaluations
num_evaluations <- 10
for (i in 1:num_evaluations) {
# Generate random values for intake_change_low and intake_change_high
intake_change_pop <- runif(1, -51.99,-49.12)
scaled_intake <- intake_change_pop/0.6424
over_intake <- 0.95 * scaled_intake
obese_intake <- 1.04 * scaled_intake
mobese_intake <- 1.22 * scaled_intake
# Call the overweight_func function
result <- bootstrap_func(over_intake, obese_intake, mobese_intake)
result <- result %>% mutate(pop_intake = intake_change_pop,
over_intake = over_intake,
obese_intake = obese_intake,
mobese_intake = mobese_intake)
# Append the result to the list
results_all_2[[i]] <- result
}
result_df_2 <- do.call("rbind", results_all_2)
View(result_df_2)
test <- result_df_2 %>% filter(final_bmi_class == "obese")
View(test)
bootstrap_func <- function(over_intake,obese_intake,mobese_intake){
df_1_2 <- df %>%
filter(bmi <25) %>% #create data set with just Underweight + normal weight data
mutate(intake_diff = 0) %>% #calorie intake doesn't change for this group
mutate(final_weight = weight)  #body weight doesn't change for this group
df_3 <- df %>%
filter(bmi >= 25, bmi < 30) %>% #create data set with just overweight people
mutate(intake_diff = -over_intake) #create new column for kcal reduction
eichange_3 <- t(apply(df_3, 1, function(x) rep(as.numeric(x["intake_diff"]), 365*3))) #apply energy intake change over 3 years
model_weight_3 <- adult_weight(df_3$weight, df_3$height/100, df_3$age, df_3$sex, eichange_3, days=365*3) #calculate final body weight
bw_3 <- model_weight_3$Body_Weight %>% as.data.frame() %>% select(V1095) %>% rename(final_weight = V1095) #convert final body weight list into dataframe
df_3 <- cbind(df_3, bw_3)
df_4 <- df %>%
filter(bmi >= 30, bmi < 40) %>%
mutate(intake_diff = -obese_intake)
eichange_4 <- t(apply(df_4, 1, function(x) rep(as.numeric(x["intake_diff"]), 365*3)))
model_weight_4 <- adult_weight(df_4$weight, df_4$height/100, df_4$age, df_4$sex, eichange_4, days=365*3)
bw_4 <- model_weight_4$Body_Weight %>% as.data.frame() %>% select(V1095) %>% rename(final_weight = V1095)
df_4 <- cbind(df_4, bw_4)
df_5 <- df %>%
filter(bmi >= 40) %>%
mutate(intake_diff = -mobese_intake)
eichange_5 <- t(apply(df_5, 1, function(x) rep(as.numeric(x["intake_diff"]), 365*3)))
model_weight_5 <- adult_weight(df_5$weight, df_5$height/100, df_5$age, df_5$sex, eichange_5, days=365*3)
bw_5 <- model_weight_5$Body_Weight %>% as.data.frame() %>% select(V1095) %>% rename(final_weight = V1095)
df_5 <- cbind(df_5, bw_5)
df_complete <- rbind(df_1_2, df_3, df_4, df_5)
##Calculate final bmi
df_complete$final_bmi <- df_complete$final_weight / ((df_complete$height/100)^2)
##Create final_bmi_class column
df_complete <- df_complete %>%
mutate(final_bmi_class = case_when(final_bmi <= 18.5 ~ "underweight",
final_bmi > 18.5 & final_bmi < 25 ~ "normal",
final_bmi >= 25 & final_bmi < 30 ~ "overweight",
final_bmi >= 30 & final_bmi < 40 ~ "obese",
final_bmi >= 40 ~ "morbidly obese",
TRUE ~ "NA"))
svydes <-  svydesign(ids=~df_complete$psu,
nest = T,
data=df_complete,
weights=df_complete$wt_int) #apply survey weights
prop <- prop.table(svytable(~bmi_class, svydes)) %>%
as.data.frame() %>%
mutate(bmi_class = factor(bmi_class, levels = c("underweight", "normal", "overweight", "obese", "morbidly obese"))) %>%
rename(baseline_prop = Freq)
prop_final <- prop.table(svytable(~final_bmi_class, svydes)) %>%
as.data.frame() %>%
mutate(final_bmi_class = factor(final_bmi_class, levels = c("underweight", "normal", "overweight", "obese", "morbidly obese"))) %>%
rename(final_prop = Freq)
prop_final
}
# chunk 1
results_all_1 <- list()
# Set the seed outside the loop to ensure reproducibility
set.seed(42)
# Number of evaluations
num_evaluations <- 100
for (i in 1:num_evaluations) {
# Generate random values for intake_change_low and intake_change_high
intake_change_pop <- runif(1, -51.99,-49.12)
scaled_intake <- intake_change_pop/0.6424
over_intake <- 0.95 * scaled_intake
obese_intake <- 1.04 * scaled_intake
mobese_intake <- 1.22 * scaled_intake
# Call the overweight_func function
result <- bootstrap_func(over_intake,obese_intake,mobese_intake)
result <- result %>% mutate(pop_intake = intake_change_pop)
# Append the result to the list
results_all_1[[i]] <- result
}
result_df_1 <- do.call("rbind", results_all_1)
# chunk 2
results_all_2 <- list()
# Set the seed outside the loop to ensure reproducibility
set.seed(46)
# Number of evaluations
num_evaluations <- 100
for (i in 1:num_evaluations) {
# Generate random values for intake_change_low and intake_change_high
intake_change_pop <- runif(1, -51.99,-49.12)
scaled_intake <- intake_change_pop/0.6424
over_intake <- 0.95 * scaled_intake
obese_intake <- 1.04 * scaled_intake
mobese_intake <- 1.22 * scaled_intake
# Call the overweight_func function
result <- bootstrap_func(over_intake, obese_intake, mobese_intake)
result <- result %>% mutate(pop_intake = intake_change_pop,
over_intake = over_intake,
obese_intake = obese_intake,
mobese_intake = mobese_intake)
# Append the result to the list
results_all_2[[i]] <- result
}
results_all_1 <- list()
# Set the seed outside the loop to ensure reproducibility
set.seed(42)
# Number of evaluations
num_evaluations <- 10
for (i in 1:num_evaluations) {
# Generate random values for intake_change_low and intake_change_high
intake_change_pop <- runif(1, -51.99,-49.12)
scaling_factor <- runif(1, 0.6424*0.99, 0.6424*1.01)
scaled_intake <- intake_change_pop/scaling_factor
over_scale <- runif(1, 0.95*0.99, 0.95*1.01)
obese_scale <- runif(1, 1.04*0.99, 1.04*1.01)
mobese_scale <- runif(1, 1.22*0.99, 1.22*1.01)
over_intake <- over_scale * scaled_intake
obese_intake <- obese_scale * scaled_intake
mobese_intake <- mobese_scale * scaled_intake
# Call the overweight_func function
result <- bootstrap_func(over_intake,obese_intake,mobese_intake)
result <- result %>% mutate(pop_intake = intake_change_pop)
# Append the result to the list
results_all_1[[i]] <- result
}
result_df_1 <- do.call("rbind", results_all_1)
View(result_df_1)
deviation <- 0.05
(1-deviation)
results_all_1 <- list()
# Set the seed outside the loop to ensure reproducibility
set.seed(42)
# Number of evaluations
num_evaluations <- 10
deviation <- 0.05
for (i in 1:num_evaluations) {
# Generate random values for intake_change_low and intake_change_high
intake_change_pop <- runif(1, -51.99,-49.12)
scaling_factor <- runif(1, (1-deviation)*0.99, 0.6424*(1 + deviation))
scaled_intake <- intake_change_pop/scaling_factor
over_scale <- runif(1, 0.95*(1-deviation), 0.95*(1 + deviation))
obese_scale <- runif(1, 1.04*(1-deviation), 1.04*(1 + deviation))
mobese_scale <- runif(1, 1.22*(1-deviation), 1.22*(1 + deviation))
over_intake <- over_scale * scaled_intake
obese_intake <- obese_scale * scaled_intake
mobese_intake <- mobese_scale * scaled_intake
# Call the overweight_func function
result <- bootstrap_func(over_intake,obese_intake,mobese_intake)
result <- result %>% mutate(pop_intake = intake_change_pop)
# Append the result to the list
results_all_1[[i]] <- result
}
result_df_1 <- do.call("rbind", results_all_1)
View(result_df_1)
results_all_1 <- list()
# Set the seed outside the loop to ensure reproducibility
set.seed(42)
# Number of evaluations
num_evaluations <- 10
deviation <- 0.05
for (i in 1:num_evaluations) {
# Generate random values for intake_change_low and intake_change_high
intake_change_pop <- runif(1, -51.99,-49.12)
scaling_factor <- runif(1, 0.6424*(1-deviation), 0.6424*(1 + deviation))
scaled_intake <- intake_change_pop/scaling_factor
over_scale <- runif(1, 0.95*(1-deviation), 0.95*(1 + deviation))
obese_scale <- runif(1, 1.04*(1-deviation), 1.04*(1 + deviation))
mobese_scale <- runif(1, 1.22*(1-deviation), 1.22*(1 + deviation))
over_intake <- over_scale * scaled_intake
obese_intake <- obese_scale * scaled_intake
mobese_intake <- mobese_scale * scaled_intake
# Call the overweight_func function
result <- bootstrap_func(over_intake,obese_intake,mobese_intake)
result <- result %>% mutate(pop_intake = intake_change_pop)
# Append the result to the list
results_all_1[[i]] <- result
}
result_df_1 <- do.call("rbind", results_all_1)
View(result_df_1)
results_all_1 <- list()
# Set the seed outside the loop to ensure reproducibility
set.seed(42)
# Number of evaluations
num_evaluations <- 100
deviation <- 0.05
for (i in 1:num_evaluations) {
# Generate random values for intake_change_low and intake_change_high
intake_change_pop <- runif(1, -51.99,-49.12)
scaling_factor <- runif(1, 0.6424*(1-deviation), 0.6424*(1 + deviation))
scaled_intake <- intake_change_pop/scaling_factor
over_scale <- runif(1, 0.95*(1-deviation), 0.95*(1 + deviation))
obese_scale <- runif(1, 1.04*(1-deviation), 1.04*(1 + deviation))
mobese_scale <- runif(1, 1.22*(1-deviation), 1.22*(1 + deviation))
over_intake <- over_scale * scaled_intake
obese_intake <- obese_scale * scaled_intake
mobese_intake <- mobese_scale * scaled_intake
# Call the overweight_func function
result <- bootstrap_func(over_intake,obese_intake,mobese_intake)
result <- result %>% mutate(pop_intake = intake_change_pop)
# Append the result to the list
results_all_1[[i]] <- result
}
result_df_1 <- do.call("rbind", results_all_1)
View(result_df_1)
library(here)
library(tidyverse)
library(bw)
library(survey)
library(reshape2)
library(magrittr)
##############################################################################################################################
###
####  ROBUSTNESS CHECKS ####
###
##############################################################################################################################
#Create base date frame from processed hse data
df <- read_csv(here("inputs/processed/hse_2019.csv") %>%
str_remove("ahl_targets/analysis/bmi_modelling/")) %>%
mutate(sex = ifelse(sex == 1, "male", "female"))
bootstrap_func <- function(over_intake,obese_intake,mobese_intake){
df_1_2 <- df %>%
filter(bmi <25) %>% #create data set with just Underweight + normal weight data
mutate(intake_diff = 0) %>% #calorie intake doesn't change for this group
mutate(final_weight = weight)  #body weight doesn't change for this group
df_3 <- df %>%
filter(bmi >= 25, bmi < 30) %>% #create data set with just overweight people
mutate(intake_diff = -over_intake) #create new column for kcal reduction
eichange_3 <- t(apply(df_3, 1, function(x) rep(as.numeric(x["intake_diff"]), 365*3))) #apply energy intake change over 3 years
model_weight_3 <- adult_weight(df_3$weight, df_3$height/100, df_3$age, df_3$sex, eichange_3, days=365*3) #calculate final body weight
bw_3 <- model_weight_3$Body_Weight %>% as.data.frame() %>% select(V1095) %>% rename(final_weight = V1095) #convert final body weight list into dataframe
df_3 <- cbind(df_3, bw_3)
df_4 <- df %>%
filter(bmi >= 30, bmi < 40) %>%
mutate(intake_diff = -obese_intake)
eichange_4 <- t(apply(df_4, 1, function(x) rep(as.numeric(x["intake_diff"]), 365*3)))
model_weight_4 <- adult_weight(df_4$weight, df_4$height/100, df_4$age, df_4$sex, eichange_4, days=365*3)
bw_4 <- model_weight_4$Body_Weight %>% as.data.frame() %>% select(V1095) %>% rename(final_weight = V1095)
df_4 <- cbind(df_4, bw_4)
df_5 <- df %>%
filter(bmi >= 40) %>%
mutate(intake_diff = -mobese_intake)
eichange_5 <- t(apply(df_5, 1, function(x) rep(as.numeric(x["intake_diff"]), 365*3)))
model_weight_5 <- adult_weight(df_5$weight, df_5$height/100, df_5$age, df_5$sex, eichange_5, days=365*3)
bw_5 <- model_weight_5$Body_Weight %>% as.data.frame() %>% select(V1095) %>% rename(final_weight = V1095)
df_5 <- cbind(df_5, bw_5)
df_complete <- rbind(df_1_2, df_3, df_4, df_5)
##Calculate final bmi
df_complete$final_bmi <- df_complete$final_weight / ((df_complete$height/100)^2)
##Create final_bmi_class column
df_complete <- df_complete %>%
mutate(final_bmi_class = case_when(final_bmi <= 18.5 ~ "underweight",
final_bmi > 18.5 & final_bmi < 25 ~ "normal",
final_bmi >= 25 & final_bmi < 30 ~ "overweight",
final_bmi >= 30 & final_bmi < 40 ~ "obese",
final_bmi >= 40 ~ "morbidly obese",
TRUE ~ "NA"))
svydes <-  svydesign(ids=~df_complete$psu,
nest = T,
data=df_complete,
weights=df_complete$wt_int) #apply survey weights
prop <- prop.table(svytable(~bmi_class, svydes)) %>%
as.data.frame() %>%
mutate(bmi_class = factor(bmi_class, levels = c("underweight", "normal", "overweight", "obese", "morbidly obese"))) %>%
rename(baseline_prop = Freq)
prop_final <- prop.table(svytable(~final_bmi_class, svydes)) %>%
as.data.frame() %>%
mutate(final_bmi_class = factor(final_bmi_class, levels = c("underweight", "normal", "overweight", "obese", "morbidly obese"))) %>%
rename(final_prop = Freq)
prop_final
}
# chunk 1
results_all_1 <- list()
# Set the seed outside the loop to ensure reproducibility
set.seed(42)
# Number of evaluations
num_evaluations <- 100
deviation <- 0.05
for (i in 1:num_evaluations) {
# Generate random values for intake_change_low and intake_change_high
intake_change_pop <- runif(1, -51.99,-49.12)
scaling_factor <- runif(1, 0.6424*(1-deviation), 0.6424*(1 + deviation))
scaled_intake <- intake_change_pop/scaling_factor
over_scale <- runif(1, 0.95*(1-deviation), 0.95*(1 + deviation))
obese_scale <- runif(1, 1.04*(1-deviation), 1.04*(1 + deviation))
mobese_scale <- runif(1, 1.22*(1-deviation), 1.22*(1 + deviation))
over_intake <- over_scale * scaled_intake
obese_intake <- obese_scale * scaled_intake
mobese_intake <- mobese_scale * scaled_intake
# Call the overweight_func function
result <- bootstrap_func(over_intake,obese_intake,mobese_intake)
result <- result %>% mutate(pop_intake = intake_change_pop)
# Append the result to the list
results_all_1[[i]] <- result
}
result_df_1 <- do.call("rbind", results_all_1)
# chunk 2
results_all_2 <- list()
# Set the seed outside the loop to ensure reproducibility
set.seed(46)
# Number of evaluations
num_evaluations <- 100
for (i in 1:num_evaluations) {
# Generate random values for intake_change_low and intake_change_high
intake_change_pop <- runif(1, -51.99,-49.12)
scaled_intake <- intake_change_pop/0.6424
over_intake <- 0.95 * scaled_intake
obese_intake <- 1.04 * scaled_intake
mobese_intake <- 1.22 * scaled_intake
# Call the overweight_func function
result <- bootstrap_func(over_intake, obese_intake, mobese_intake)
result <- result %>% mutate(pop_intake = intake_change_pop,
over_intake = over_intake,
obese_intake = obese_intake,
mobese_intake = mobese_intake)
# Append the result to the list
results_all_2[[i]] <- result
}
View(result)
intake_change_pop <- runif(1, -51.99,-49.12)
scaling_factor <- runif(1, 0.6424*(1-deviation), 0.6424*(1 + deviation))
scaled_intake <- intake_change_pop/scaling_factor
over_scale <- runif(1, 0.95*(1-deviation), 0.95*(1 + deviation))
over_scale
library(here)
library(tidyverse)
library(bw)
library(survey)
library(reshape2)
library(magrittr)
##############################################################################################################################
###
####  ROBUSTNESS CHECKS ####
###
##############################################################################################################################
#Create base date frame from processed hse data
df <- read_csv(here("inputs/processed/hse_2019.csv") %>%
str_remove("ahl_targets/analysis/bmi_modelling/")) %>%
mutate(sex = ifelse(sex == 1, "male", "female"))
bootstrap_func <- function(over_intake,obese_intake,mobese_intake){
df_1_2 <- df %>%
filter(bmi <25) %>% #create data set with just Underweight + normal weight data
mutate(intake_diff = 0) %>% #calorie intake doesn't change for this group
mutate(final_weight = weight)  #body weight doesn't change for this group
df_3 <- df %>%
filter(bmi >= 25, bmi < 30) %>% #create data set with just overweight people
mutate(intake_diff = -over_intake) #create new column for kcal reduction
eichange_3 <- t(apply(df_3, 1, function(x) rep(as.numeric(x["intake_diff"]), 365*3))) #apply energy intake change over 3 years
model_weight_3 <- adult_weight(df_3$weight, df_3$height/100, df_3$age, df_3$sex, eichange_3, days=365*3) #calculate final body weight
bw_3 <- model_weight_3$Body_Weight %>% as.data.frame() %>% select(V1095) %>% rename(final_weight = V1095) #convert final body weight list into dataframe
df_3 <- cbind(df_3, bw_3)
df_4 <- df %>%
filter(bmi >= 30, bmi < 40) %>%
mutate(intake_diff = -obese_intake)
eichange_4 <- t(apply(df_4, 1, function(x) rep(as.numeric(x["intake_diff"]), 365*3)))
model_weight_4 <- adult_weight(df_4$weight, df_4$height/100, df_4$age, df_4$sex, eichange_4, days=365*3)
bw_4 <- model_weight_4$Body_Weight %>% as.data.frame() %>% select(V1095) %>% rename(final_weight = V1095)
df_4 <- cbind(df_4, bw_4)
df_5 <- df %>%
filter(bmi >= 40) %>%
mutate(intake_diff = -mobese_intake)
eichange_5 <- t(apply(df_5, 1, function(x) rep(as.numeric(x["intake_diff"]), 365*3)))
model_weight_5 <- adult_weight(df_5$weight, df_5$height/100, df_5$age, df_5$sex, eichange_5, days=365*3)
bw_5 <- model_weight_5$Body_Weight %>% as.data.frame() %>% select(V1095) %>% rename(final_weight = V1095)
df_5 <- cbind(df_5, bw_5)
df_complete <- rbind(df_1_2, df_3, df_4, df_5)
##Calculate final bmi
df_complete$final_bmi <- df_complete$final_weight / ((df_complete$height/100)^2)
##Create final_bmi_class column
df_complete <- df_complete %>%
mutate(final_bmi_class = case_when(final_bmi <= 18.5 ~ "underweight",
final_bmi > 18.5 & final_bmi < 25 ~ "normal",
final_bmi >= 25 & final_bmi < 30 ~ "overweight",
final_bmi >= 30 & final_bmi < 40 ~ "obese",
final_bmi >= 40 ~ "morbidly obese",
TRUE ~ "NA"))
svydes <-  svydesign(ids=~df_complete$psu,
nest = T,
data=df_complete,
weights=df_complete$wt_int) #apply survey weights
prop <- prop.table(svytable(~bmi_class, svydes)) %>%
as.data.frame() %>%
mutate(bmi_class = factor(bmi_class, levels = c("underweight", "normal", "overweight", "obese", "morbidly obese"))) %>%
rename(baseline_prop = Freq)
prop_final <- prop.table(svytable(~final_bmi_class, svydes)) %>%
as.data.frame() %>%
mutate(final_bmi_class = factor(final_bmi_class, levels = c("underweight", "normal", "overweight", "obese", "morbidly obese"))) %>%
rename(final_prop = Freq)
prop_final
}
results_all <- list()
# Set the seed outside the loop to ensure reproducibility
set.seed(42)
# Number of evaluations
num_evaluations <- 100
deviation <- 0.05
for (i in 1:num_evaluations) {
# Generate random values for intake_change_low and intake_change_high
intake_change_pop <- runif(1, -51.99,-49.12)
scaling_factor <- runif(1, 0.6424*(1-deviation), 0.6424*(1 + deviation))
scaled_intake <- intake_change_pop/scaling_factor
over_scale <- runif(1, 0.95*(1-deviation), 0.95*(1 + deviation))
obese_scale <- runif(1, 1.04*(1-deviation), 1.04*(1 + deviation))
mobese_scale <- runif(1, 1.22*(1-deviation), 1.22*(1 + deviation))
over_intake <- over_scale * scaled_intake
obese_intake <- obese_scale * scaled_intake
mobese_intake <- mobese_scale * scaled_intake
# Call the overweight_func function
result <- bootstrap_func(over_intake,obese_intake,mobese_intake)
result <- result %>% mutate(pop_intake = intake_change_pop)
# Append the result to the list
results_all[[i]] <- result
}
result_df <- do.call("rbind", results_all)
over_df <- result_df %>% filter(final_bmi_class == "overweight")
ggplot(over_df, aes(x = final_prop)) + geom_histogram(bins = 5)
ggplot(over_df, aes(x = final_prop)) + geom_histogram(bins = 10)
ggplot(over_df, aes(x = final_prop)) +
geom_histogram(bins = 10) +
labs(title = "Overweight group",
x = "Prevalence in the population") +
theme_bw()
obese_df <- result_df %>% filter(final_bmi_class == "obese")
ggplot(obese_df, aes(x = final_prop)) +
geom_histogram(bins = 10) +
labs(title = "Obese group",
x = "Prevalence in the population") +
theme_bw()
ggplot(mobese_df, aes(x = final_prop)) +
geom_histogram(bins = 10) +
labs(title = "Morbidly obese group",
x = "Prevalence in the population") +
theme_bw()
mobese_df <- result_df %>% filter(final_bmi_class == "morbidly obese")
ggplot(mobese_df, aes(x = final_prop)) +
geom_histogram(bins = 10) +
labs(title = "Morbidly obese group",
x = "Prevalence in the population") +
theme_bw()
ggplot(mobese_df, aes(x = final_prop)) +
geom_histogram(bins = 6) +
labs(title = "Morbidly obese group",
x = "Prevalence in the population") +
theme_bw()
ggplot(mobese_df, aes(x = final_prop)) +
geom_histogram(bins = 5) +
labs(title = "Morbidly obese group",
x = "Prevalence in the population") +
theme_bw()
View(obese_df)
View(mobese_df)
View(obese_df)
over_df %>% mean(final_prop)
mean(over_df$final_prop)
std(over_df$final_prop)
describe(over_df$final_prop)
describe(over_df)
library(psyc)
install.packages("psych")
library(psych)
describe(over_df)
sd(over_df$final_prop)
quantile(over_df$final_prop)
mean(over_df$final_prop)
mean(obese_df$final_prop)
sd(obese_df$final_prop)
quantile(obese_df$final_prop)
mean(mobese_df$final_prop)
sd(mobese_df$final_prop)
quantile(mobese_df$final_prop)
